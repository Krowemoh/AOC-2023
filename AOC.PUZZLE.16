*
   GIT.FILENAME = 'AOC.PUZZLE.16'
   GIT.REPO = 'https://github.com/Krowemoh/AOC-2023.git'
*
   EQU TRUE TO 1
   EQU FALSE TO 0
*
   YEAR = 2023
   DAY = FIELD(GIT.FILENAME,'.',3)
*
   AOC.ID = YEAR : '*' : DAY
*
   OPEN '','AOC-PUZZLE-FILE' TO AOC.PUZZLE.FILE ELSE
      PRINT 'Unable to open file: AOC-PUZZLE-FILE - Press RETURN':
      INPUT ANYTHING
      STOP
   END
*
   READ RAW.DATA FROM AOC.PUZZLE.FILE,AOC.ID ELSE
      PRINT 'No Puzzle Input.'
      STOP
   END
*
*TEMP    GOSUB TEST.DATA
*
   GOSUB 100
*
   GOSUB 200
*
   STOP
*
*********************  S U B R O U T I N E  *********************
*
TEST.DATA:NULL
*
   RAW.DATA = ''
*
   RAW.DATA<-1> = '.|...\....'
   RAW.DATA<-1> = '|.-.\.....'
   RAW.DATA<-1> = '.....|-...'
   RAW.DATA<-1> = '........|.'
   RAW.DATA<-1> = '..........'
   RAW.DATA<-1> = '.........\'
   RAW.DATA<-1> = '..../.\\..'
   RAW.DATA<-1> = '.-.-/..|..'
   RAW.DATA<-1> = '.|....-|.\'
   RAW.DATA<-1> = '..//.|....'
*
   RETURN
*
*********************  S U B R O U T I N E  *********************
*
100:NULL
*
   ANS = ''
*
   EQU STACK.SIZE TO 500
   DIM STACK(STACK.SIZE)
   MAT STACK = ''
*
   EQU NORTH TO '^'
   EQU EAST TO '>'
   EQU SOUTH TO 'v'
   EQU WEST TO '<'
*
   NUMBER.OF.LINES = DCOUNT(RAW.DATA,@AM)
*
   BOARD = RAW.DATA
*
   DIR = EAST
*
   X.POS = 1
   Y.POS = 1
*
   POS = X.POS : @VM : Y.POS : @VM : DIR
   CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
*
   CTR = 0
*
   LOOP
      CTR = CTR + 1
   UNTIL CTR > 50050 DO
*
      CALL STACK.POP(MAT STACK,STACK.SIZE,STEP)
*
      X.POS = STEP<1,1>
      Y.POS = STEP<1,2>
*
      IF X.POS < 1 OR X.POS > LEN(RAW.DATA<1>) THEN CONTINUE
      IF Y.POS < 1 OR Y.POS > NUMBER.OF.LINES THEN CONTINUE
*
      DIR = STEP<1,3>
*
      B = BOARD<Y.POS>[X.POS,1]
*
      BOARD<Y.POS>[X.POS,1] = 1
*
      C = RAW.DATA<Y.POS>[X.POS,1]
*
      IF C = '^' OR C = 'v' OR C = '>' OR C ='<' THEN
         C = '.'
      END
*
      IF C = '|' THEN
         IF DIR = '^' OR DIR = 'v' THEN
            C = '.'
         END ELSE
            IF NOT(NUM(B)) THEN
               POS = X.POS : @VM : Y.POS - 1 : @VM : '^'
               CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
*
               POS = X.POS : @VM : Y.POS + 1 : @VM : 'v'
               CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
            END
         END
      END
*
      IF C = '-' THEN
         IF DIR = '<' OR DIR = '>' THEN
            C = '.'
         END ELSE
            IF NOT(NUM(B)) THEN
               POS = X.POS + 1 : @VM : Y.POS : @VM : '>'
               CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
*
               POS = X.POS - 1 : @VM : Y.POS : @VM : '<'
               CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
            END
         END
      END
*
      IF C = '/' THEN
         IF DIR = '^' THEN
            POS = X.POS + 1 : @VM : Y.POS : @VM : '>'
            CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END
         IF DIR = '>' THEN
            POS = X.POS : @VM : Y.POS - 1 : @VM : '^'
            CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END
         IF DIR = 'v' THEN
            POS = X.POS - 1 : @VM : Y.POS : @VM : '<'
            CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END
         IF DIR = '<' THEN
            POS = X.POS : @VM : Y.POS + 1 : @VM : 'v'
            CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END
      END
*
      IF C = '\' THEN
         IF DIR = '^' THEN
            POS = X.POS - 1 : @VM : Y.POS : @VM : '<'
            CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END
         IF DIR = '>' THEN
            POS = X.POS : @VM : Y.POS + 1 : @VM : 'v'
            CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END
         IF DIR = 'v' THEN
            POS = X.POS + 1 : @VM : Y.POS : @VM : '>'
            CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END
         IF DIR = '<' THEN
            POS = X.POS : @VM : Y.POS - 1 : @VM : '^'
            CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END
      END
*
      IF C = '.' THEN
         IF RAW.DATA<Y.POS>[X.POS,1] = '.' THEN
            RAW.DATA<Y.POS>[X.POS,1] = DIR
         END
*
         BEGIN CASE
            CASE DIR = '^'
               POS = X.POS : @VM : Y.POS - 1 : @VM : DIR
               CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
*
            CASE DIR = '>'
               POS = X.POS + 1 : @VM : Y.POS : @VM : DIR
               CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
*
            CASE DIR = 'v'
               POS = X.POS : @VM : Y.POS + 1 : @VM : DIR
               CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
*
            CASE DIR = '<'
               POS = X.POS - 1 : @VM : Y.POS : @VM : DIR
               CALL STACK.PUSH(MAT STACK,STACK.SIZE,POS)
         END CASE
      END
*
*TEMP       PRINT RAW.DATA
*TEMP       PRINT
      PRINT COUNT(BOARD,1)
*TEMP       PRINT BOARD
*TEMP       PRINT
*
   REPEAT
*
   PRINT 'Part 1 ANS: ' : ANS
*
   RETURN
*
*********************  S U B R O U T I N E  *********************
*
200:NULL
*
   ANS = ''
*
   PRINT 'Part 2 ANS: ' : ANS
*
   RETURN
*
* END OF PROGRAM
*
   END
*
